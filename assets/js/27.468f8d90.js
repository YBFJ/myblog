(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{344:function(v,t,_){"use strict";_.r(t);var C=_(0),n=Object(C.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"tcp-三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手"}},[v._v("#")]),v._v(" TCP 三次握手")]),v._v(" "),_("h4",{attrs:{id:"学习的是-cdsn-里面的一个博客-tcp-三次握手和四次挥手详解-面试常见问题-以及另一个-tcp-协议讲解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习的是-cdsn-里面的一个博客-tcp-三次握手和四次挥手详解-面试常见问题-以及另一个-tcp-协议讲解"}},[v._v("#")]),v._v(" 学习的是 CDSN 里面的一个博客:"),_("a",{attrs:{href:"https://blog.csdn.net/wwl012345/article/details/90261423",target:"_blank",rel:"noopener noreferrer"}},[v._v("TCP 三次握手和四次挥手详解(面试常见问题)"),_("OutboundLink")],1),v._v("以及"),_("a",{attrs:{href:"https://blog.csdn.net/qq_38950316/article/details/81087809",target:"_blank",rel:"noopener noreferrer"}},[v._v("另一个 TCP 协议讲解"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("TCP 是面向连接的协议，运输连接是用来传送 TCP 报文的。TCP 的运输连接有三个过程，即建立连接、数据传输和连接释放。\nTCP 连接建立过程中主要解决以下三个问题：\n(1) 要是每一方都能够确认对方的存在。\n(2) 要允许双方协商一些参数。\n(3) 能够对运输实体资源进行分配。\nTCP 连接的建立采取客户机/服务器模式，主动发起连接建立的应用进程叫做客户机，而被动等待连接建立的应用进程叫做服务器。\n  　 TCP 的连接建立（重要的几个数值：SYN、初始序号；ACK、初始序号、确认号；ACK、确认号、发送的序号）：")]),v._v(" "),_("ol",[_("li",[v._v("首先，c 客户机和服务器的 TCP 进程都处于 CLOSED 状态，当要进行 TCP 连接时候，客户机主动打开连接，服务器被动打开连接（服务请求往往是由客户机向服务器发起的，因为想要请求的资源都在服务器上，所以客户机想要获取资源就必须主动向服务器发起请求，而不是等待服务器向自己也就是客户机发起请求）。")]),v._v(" "),_("li",[v._v("然后，服务器 的 TCP 进程先创建传输控制块 TCB（传输控制块 TCB 存储了每一个连接中的重要信息，比如：TCP 连接表、指向发送、接收缓存的指针、指向重传队列的指针、当前的发送和接收序号等）。此时，服务器就处于一个 LISTEN（收听）状态。同样，客户机也会首先创建一个控制块 TCB 发送给服务器，这样转呗工作就做好了。")]),v._v(" "),_("li",[v._v("现在就开始真正的三次握手。首先，客户机先向服务器发送连接请求报文段，该报文段中将首部中的同步位 SYN 设置为：1（只有当 SYN 设置为 1 时，才能表明客户机想要和服务器建立连接），并且随机选在一个初始序号 u，注意此时的 SYN 数据报中并没有携带数据，但是仍要消耗掉一个序号（意味着，下次客户机发送数据的时候，序号为 u+1），此时客户机进入 SYN-SENT（同步已发送）状态。")]),v._v(" "),_("li",[v._v("此时，服务器收到客户机的请求是，如果同意与该客户机进行连接，则需要向客户机发送确认报文。在发送报文")])]),v._v(" "),_("p",[v._v("中需要将 SYN 和 ACK 都设置成 1（当 ACK 为 1 时，表明服务器同意和客户机进行里连接），并且随机选择一个初始      序号 v，确认号（ack）为 u+1（确认号表明服务器渴望收到的下一个报文段的第一个数据字节的序号，因为之前          客户机发送了一个 u，所以下一个序号为 u+1），注意此时 SYN 数据报中并没有携带数据，也要消耗一个序 号（      同样的，也就是说服务器下次发送数据的时候，序号为 v+1），此时 TCP 服务器进程进入到 SYN-RCVD（同步收          到）阶段。")]),v._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[v._v("TCP 客户端收到服务器的确认后，还需要向服务器给出确认。确认报文段中 ACK 设置为 1，确认号为 ack=v+1（因为之前服务器给客户机发送的序号为 v，因此现在客户机向服务器发送的确认号为 ack=v+1，意思就是客户机渴望收到下一个报文段的第一个数据字节为 v+1），此时客户机发送的序号为 u+1（这是因为客户机向服务器发送连接的时候消耗了序号 u，因为这时的序号为 u+1）。注意：在进行三次握手的时候，ACK 报文段可以携带数据，也可以不携带数据，如果携带数据，则消耗一个序列，这样客户机下次发送报文段时的序号为 u+2，如果不携带书籍则不消耗序号，下次客户机发送报文段时的序号为 u+1。这时 TCP 连接已经建立，客户机和服务器都进入到 ESTABLISHED（已建立连接）状态。")])]),v._v(" "),_("p",[v._v("其实上述的三次握手实质上是相当于下列的对话： -客户机：服务器，我想和你建立连接，你同意吗？（SYN=1） -服务器：客户机，我同意和你建立连接(ACK = 1)；我也想和你建立连接，你同意吗？（SYN =1 ） -客户机：服务器，我同意和你建立连接。（ACK = 1）\n其实，在进行第二次握手的时候（即服务器向客户机发送应答时候），可以看做发了两次包，先回答客户机的服务请求(ACK =1, ack = u+1)，然后再向客户机发出请求(SYN =1, seq = y)")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/467491/1581935033657-1fcb206c-7ac8-4ef9-88f9-31786b71014e.png#align=left&display=inline&height=627&name=image.png&originHeight=627&originWidth=904&size=257817&status=done&style=none&width=904",alt:"image.png"}})]),v._v(" "),_("p",[v._v("常见面试问题：\n问：三次握手中，为什么客户机最后还要再向服务器发送一次确认呢？")]),v._v(" "),_("p",[v._v("答：这是为了防止已失效的连接请求报文段突然又传到了服务器。所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常的情况，客户机发出连接请求，但因为连接请求报文丢失而未收到确认。于是客户机再重传了一次连接请求，后来收到了确认，建立了连接。数据传输完后，就释放了连接。客户机共发送了两个连接请求报文段，其中第一个丢失，第二个到达了服务器，没有所谓的“已失效的连接请求报文段”。")]),v._v(" "),_("p",[v._v("但是如果出现了一种异常情况，即客户机发出的第一个报文段并没有丢失，而是在某个节点上长时间滞留了，直至客户机向服务器发送了第二个报文段并且已经完成数据传输释放了连接，此时，第一个报文到达服务器后会被误以为是客户机重新发起的一次连接请求，实质上是一个早已失效的连接请求。如果没有第三次握手，那么这个连接就建立了，但是客户机并不会向服务器发送任何请求，这样连接就会一直持续，白白的消耗网络资源。")]),v._v(" "),_("p",[v._v("TCP 的连接释放（FIN、产生序号；ACK、产生序号、确认号；ACK、确认号）：\n  １.数据传输结束后，通信的双方都可以释放连接。此时，客户机和服务器都处于 ESTABLISHED（已建立连接）状态。")]),v._v(" "),_("p",[v._v('２.假设客户机请求完资源了，想要释放连接。首先，客户机的应用进程先向服务器发出连接释放报文段，该报文段中将首部的终止控制位 FIN 置为１（只有当 FIN 置为１时，才能表明客户机想要和服务器断开连接），并且产生序号为ｕ（注意：此时的ｕ不是随机产生的，而是之前客户机传送的数据的最后一个字节的序号加１）。此时客户机进入到 FIN－WAIT－１（终止等待１）状态，等待服务器的确认。\n接下来的 3 和 4 都是服务器做的：\n这里先回复一个 ACK 报文，告诉 Client 端，"你发的 FIN 报文我收到了"。只有等到我 Server 端所有的报文都发送完了，我才能发送 FIN 报文，然后在加上确认序号和 ack 号，因此不能一起发送，多了等待一下数据传递完毕才加上 FIN 报文，故需要四步挥手。\n  ３.服务器收到连接释放报文后发出确认，在发送报文中将首部中的 ACK 置为１（ACK 置为１，表面服务器同意与客户机释放连接），并且产生序号ｖ（注意：此时的 v 不是随机产生的，而是之前服务器传送的数据的最后一个字节的序号加１），并且发出确认号为 u+１（确认号表明服务器渴望收到的下一个报文段的第一个数据字节的序号，因为之前发送了 u，所以下一个序号为 u+1）。此时服务器就进入 CLOSE－WAIT（关闭等待）状态，客户机进入 FIN-WAIT-2 状态。\n        此时，从客户机到服务器这个方向的连接就被释放了，也就是说，客户机已经没有数据要向服务器发送了，但是如果服务器向客户机发送数据，客户机仍要接收数据。也就是说：从客户机到服务器的连接已经被释放了，但是从服务器到客户机的连接还没被释放。此时，TCP 连接处于半关闭状态。\n       4.如果服务器向客户机也没有要发送的数据的话，那么服务器的应用进程就可以向客户机发出连接释放报文段（注意此时还是服务器向客户机发送数据），该报文段中将首部的终止控制位 FIN 置为 1（只有当 FIN 置为１时，才能表明客户机想要和服务器断开连接），ACK 也置为 1，并且序号为 w（重点注意，此时的 w 不一定等于 v+1。如果在客户机释放了连接之后，服务器向客户机仍旧发送了一部分数据，那么此时 w 不等于 v+1，但是如果期间没有再发送数据，那么 w 就等于 v+1。总而言之，这个 w 等于服务器上一次发送的数据的最后一个字节加 1），并且发送确认号(ack，ack 总是对方上次的+1)为 u+1（确认号表明服务器渴望收到的下一个报文段的第一个数据字节的序号，因为之前发送了 u，所以下一个序号为 u+1）。此时服务器就进入了 LAST-ACK（最后确认）状态。\n      5.客户机收到服务器的连接释放报文后，必须对此报文进行确认。在该报文段中将 ACK 置为 1，确认号为 w+1（也就是说服务器到客户机传的数据全部都接收到了，确认号表明服务器渴望收到的下一个报文段的第一个数据字节的序号，因为之前发送了 w，所以下一个序号为 w+1），产生序号为 u+1（因为上一个发送的数据的序号为 u）。此时服务器进入到 TIME-WAIT（等待时间）状态。但是，此时 TCP 连接还没有被释放掉。必须经过 2MSL 后服务器才能进入到 CLOSED 状态。（注：MSL 叫做最长报文段寿命，RFC 建议为两分钟，也就是说，要经过四分钟才能进入到 CLOSED 状态）。')]),v._v(" "),_("p",[v._v("其实上面的四次挥手实质上就相当于是下列的对话：")]),v._v(" "),_("p",[v._v("-客户机：服务器，我想和你断开连接，你同意吗？（FIN=1）")]),v._v(" "),_("p",[v._v("-服务器：我同意（ACK=1）")]),v._v(" "),_("p",[v._v("（在此期间，服务器可能还会向客户机发送数据，但是客户机却不能再向服务器发送数据）")]),v._v(" "),_("p",[v._v("-服务器：客户机，我想要和你断开连接，你同意吗？（FIN=1）")]),v._v(" "),_("p",[v._v("-客户机：我同意。（ACK=1）")]),v._v(" "),_("p",[v._v("再等待 2MSL 时间后就真正断开了连接。")]),v._v(" "),_("p",[v._v("常见面试问题：")]),v._v(" "),_("p",[v._v("问 1：为什么客户机发送完最后一个数据后要在 TIME-WAIT 状态等待 2MSL（四分钟）的时间呢？")]),v._v(" "),_("p",[v._v("答：第一：为了保证客户机最后发送的那个 ACK 报文段能够到达服务器。这个 ACK 报文段可能会丢失。因而使处在 LAST-ACK 状态的 B 收不到对已发送的 FIN ＋ ACK 报文段的确认。服务器会超时重传这个 FIN ＋ ACK 报文段，而客户机就能在 2MSL 时间内收到这个重传的 FIN+ACK 报文段。接着客户机重传一次确认，重新启动 2MSL 计时器，最后客户机和服务器都可以进入到 CLOSED（关闭）状态。如果没有 2MSL 等待时间，那么就无法收到重传的 FIN+ ACK 包，无法进入正常的 CLOSED 状态。")]),v._v(" "),_("p",[v._v("第二，防止“已失效的连接请求报文段”出现在本连接中。客户机在发送完最后一个 ACK 报文段，再经过时间 2MSL，就可以使本连接持续的时间内所产生的报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。")]),v._v(" "),_("p",[v._v("问 2：为什么连接的时候是三次握手，关闭的时候却是四次握手？")]),v._v(" "),_("p",[v._v('答：因为当 Server 端收到 Client 端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当 Server 端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉 Client 端，"你发的 FIN 报文我收到了"。只有等到我 Server 端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四步握手。')]),v._v(" "),_("p",[v._v("问题 3：为什么不能用两次握手进行连接？")]),v._v(" "),_("p",[v._v("答：3 次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。")]),v._v(" "),_("p",[v._v("现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机 S 和 C 之间的通信，假定 C 给 S 发送一个连接请求分组，S 收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S 认为连接已经成功地建立了，可以开始发送数据分组。可是，C 在 S 的应答分组在传输中被丢失的情况下，将不知道 S 是否已准备好，不知道 S 建立什么样的序列号，C 甚至怀疑 S 是否收到自己的连接请求分组。在这种情况下，C 认为连接还未建立成功，将忽略 S 发来的任何数据分组，只等待连接确认应答分组。而 S 在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。")]),v._v(" "),_("p",[v._v("问题 4：如果已经建立了连接，但是客户端突然出现故障了怎么办？")]),v._v(" "),_("p",[v._v("TCP 还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为 2 小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔 75 秒钟发送一次。若一连发送 10 个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。")]),v._v(" "),_("p",[v._v("————————————————\n版权声明：本文为 CSDN 博主「青柚_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_38950316/article/details/81087809")]),v._v(" "),_("p",[v._v("————————————————\n版权声明：本文为 CSDN 博主「想走安全的小白」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wwl012345/article/details/90261423")])])}),[],!1,null,null,null);t.default=n.exports}}]);